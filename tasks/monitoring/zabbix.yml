---

- name: Create custom scripts directory
  file:
    path: "{{ zabbix_agent__custom_scripts_directory|d('/opt/zabbix-agent-scripts') }}"
    owner: root
    group: root
    mode: 0755
    state: directory
  tags: ['mariadb-server', 'mariadb-server-monitoring']

- name: Remove previous MariaDB monitoring user
  mysql_user:
    name: '{{ mariadb_server__monitoring_username }}'
    host: localhost
    priv: '*.*:PROCESS,REPLICATION CLIENT'
    login_unix_socket: '{{ mariadb_server__socket_file }}'
    login_user: '{{ mariadb_server__root_login }}'
    login_password: '{{ mariadb_server__root_password|d(omit) }}'
    state: absent
  tags: ['mariadb-server', 'mariadb-server-monitoring']

- name: Setup MariaDB monitoring MariaDB user
  mysql_user:
    name: '{{ _mariadb_server__monitoring_username }}'
    password: '{{ mariadb_server__monitoring_password }}'
    host: localhost
    priv: '*.*:PROCESS,REPLICATION CLIENT'
    login_unix_socket: '{{ mariadb_server__socket_file }}'
    login_user: '{{ mariadb_server__root_login }}'
    login_password: '{{ mariadb_server__root_password|d(omit) }}'
    state: present
  tags: ['mariadb-server', 'mariadb-server-monitoring']

- name: Get current max connections value for monitoring user
  command: >
    {{ mariadb_server__client_executable }}
    --user={{ mariadb_server__root_login }}
    {% if mariadb_server__root_password is defined %} --password={{ mariadb_server__root_password }}{% endif %}
    --socket={{ mariadb_server__socket_file }}
    --batch --skip-column-names
    --execute="SELECT `max_user_connections` FROM `mysql`.`user` WHERE `user` = '{{ _mariadb_server__monitoring_username }}' AND `host` = 'localhost'"
  register: _mariadb_server__monitoring_max_connections
  check_mode: false
  changed_when: false
  tags: ['mariadb-server', 'mariadb-server-monitoring']

- name: Set current max connections value for monitoring user
  command: >
    {{ mariadb_server__client_executable }}
    --user={{ mariadb_server__root_login }}
    {% if mariadb_server__root_password is defined %} --password={{ mariadb_server__root_password }}{% endif %}
    --socket={{ mariadb_server__socket_file }}
    --batch --skip-column-names
    --execute="UPDATE `mysql`.`user` SET `max_user_connections` = 1 WHERE `user` = '{{ _mariadb_server__monitoring_username }}' AND `host` = 'localhost' LIMIT 1; FLUSH PRIVILEGES;"
  when: _mariadb_server__monitoring_max_connections.stdout|int != 1
  tags: ['mariadb-server', 'mariadb-server-monitoring']

- name: Install mariadb query cli file
  template:
    src: mariadb_status_cli.py.j2
    dest: "{{ zabbix_agent__custom_scripts_directory|d('/opt/zabbix-agent-scripts') }}/mariadb_status_cli.py"
    owner: root
    group: root
    mode: 0755
  tags: ['mariadb-server', 'mariadb-server-monitoring']

- name: Install monitoring credentials
  include_tasks: types/credential_cnf.yml
  vars:
    mariadb_server__credential_cnf:
      path: "{{ zabbix_agent__userparameters_conf_directory|d('/etc/zabbix/userparameters_config.d') }}/mariadb.cnf"
      groups:
        - group:
            - mysqladmin
            - connector_python
          host: localhost
          user: '{{ _mariadb_server__monitoring_username }}'
          password: '{{ mariadb_server__monitoring_password }}'
          socket: '{{ mariadb_server__socket_file }}'
  tags: ['mariadb-server', 'mariadb-server-monitoring']

- name: Configure zabbix userparameters
  include_role:
    name: zabbix-agent
    tasks_from: types/user_parameter
  vars:
    zabbix_agent__userparameter:
      name: mariadb
      userparameters:
        - key: mariadb.ping
          command: "mysqladmin --defaults-file={{ zabbix_agent__userparameters_conf_directory|d('/etc/zabbix/userparameters_config.d') }}/mariadb.cnf ping 1>/dev/null 2>&1; echo $?"
          comment: Check if mysqld is alive
        - key: mariadb.version
          command: "for i in `seq 4`; do mysqladmin --defaults-file={{ zabbix_agent__userparameters_conf_directory|d('/etc/zabbix/userparameters_config.d') }}/mariadb.cnf version 2>/dev/null && break; sleep 0.4; done | grep '^Server version' | awk '{ print $3 }'"
          comment: Return the current version of the server
        - key: mariadb.status
          command: "{{ zabbix_agent__custom_scripts_directory|d('/opt/zabbix-agent-scripts') }}/mariadb_status_cli.py --type=status"
          comment: Get global status from mariadb server
        - key: mariadb.variables
          command: "{{ zabbix_agent__custom_scripts_directory|d('/opt/zabbix-agent-scripts') }}/mariadb_status_cli.py --type=variables"
          comment: Get global variables from mariadb server
      state: present
  tags: ['mariadb-server', 'mariadb-server-monitoring']
